//##################################################################################################
//#                                                                                                #
//# Kernel/memory: mod.rs                                                                          #
//#                                                                                                #
//# AUTHOR: Eric S. Collins <ericscollins@protonmail.com>                                          #
//#                                                                                                #
//#                                                                                                #
//# MIT LICENSE                                                                                    #
//# ---------------------------------------------------------------------------------------------- #
//#                                                                                                #
//# Copyright 2017 Eric S. Collins                                                                 #
//#                                                                                                #
//# Permission is hereby granted, free of charge, to any person obtaining a copy of this software  #
//# and associated documentation files (the "Software"), to deal in the Software without           #
//# restriction, including without limitation the rights to use, copy, modify, merge, publish,     #
//# distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the  #
//# Software is furnished to do so, subject to the following conditions:                           #
//#                                                                                                #
//# The above copyright notice and this permission notice shall be included in all copies or       #
//# substantial portions of the Software.                                                          #
//#                                                                                                #
//# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING  #
//# BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND     #
//# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,   #
//# DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, #
//# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.        #
//#                                                                                                #
//# ---------------------------------------------------------------------------------------------- #
//#                                                                                                #
//#                                                                                                #
//# NOTE:   The majority of code in this file was written while closely following a tutorial       #
//#         createad by Philip Opperman <contact@phil-opp.com>. The tutorial may be found at:      #
//#                                    http://os.phil-opp.com/                                     #
//#         Source code used the above tutorial may be found at:                                   #
//#                             https://github.com/phil-opp/blog_os                                #
//#                                                                                                #
//##################################################################################################


//##################################################################################################
//*************************************** DEPENDENCIES *********************************************
//##################################################################################################


pub use self::alpha_frame_allocator::AlphaFrameAllocator;
use self::paging::PhysicalAddress;

//==================================================================================================


pub mod alpha_frame_allocator;
pub mod paging;

//##################################################################################################
//*********************************** STATIC & CONST DATA ******************************************
//##################################################################################################


pub const PAGE_SIZE: usize = 4096;


//##################################################################################################
//************************************ TRAIT DEFINITIONS *******************************************
//##################################################################################################


//==================================================================================================
pub trait FrameAllocator {
//==================================================================================================

    //==============================================================================================
    fn allocate_frame(&mut self) -> Option<Frame>;
    //----------------------------------------------------------------------------------------------
    // Attempt to allocate a frame.
    //----------------------------------------------------------------------------------------------
    // TAKES:   nothing
    //
    // RETURNS: Some(...) -> A frame object, if a frame was available
    //          None      -> No frames available
    //==============================================================================================


    //==============================================================================================
    fn deallocate_frame(&mut self, frame:Frame);
    //----------------------------------------------------------------------------------------------
    // Deallocate a frame.
    //----------------------------------------------------------------------------------------------
    // TAKES:   frame -> the frame to deallocate
    //
    // RETURNS: nothing
    //==============================================================================================
}



//##################################################################################################
//************************************ STRUCT DECLARATIONS *****************************************
//##################################################################################################


#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd, Debug)]
//==================================================================================================
pub struct Frame {
//--------------------------------------------------------------------------------------------------
// 
//==================================================================================================

    pub frame_num: usize,
}

//##################################################################################################
//*********************************** STRUCT IMPLEMENTATIONS  **************************************
//##################################################################################################

//==================================================================================================
impl Frame {
//==================================================================================================

    
    //==============================================================================================
    fn frame_containing_address(address: PhysicalAddress) -> Frame {
    //----------------------------------------------------------------------------------------------
    // 
    //----------------------------------------------------------------------------------------------
    //
    //
    //
    //==============================================================================================

        Frame { frame_num: address / PAGE_SIZE }
    }


    //==============================================================================================
    fn address(&self) -> PhysicalAddress {
    //----------------------------------------------------------------------------------------------
    //
    //----------------------------------------------------------------------------------------------
    //    
    //    
    //
    //==============================================================================================

        self.frame_num * PAGE_SIZE
    }
}

